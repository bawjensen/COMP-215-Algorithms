/* node.h last modified: 10/28/2013*/#ifndef NODE#define NODE#include "constants.h"class Node         		{  public:	Node();				// default CTOR	Node(string);		// CTOR when string is known		Node(const Node&);  // COPY CTOR		~Node();			// DTOR        // ---------- SETTERS ------------------------	void StoreText(const string /*in*/ newText);	//..........................................	// PRE:   newText is a valid string	// POST:  node contains the string in it	void AppendRight(Node* /*in*/ newNode);	//..........................................	// PRE: Assigned(newNode)	// POST: this-> node has a new right child	void AppendLeft(Node* /*in*/ newNode);	//..........................................	// PRE: Assigned(newNode)	// POST: this-> node has a new left child	// ---------- GETTERS ------------------------	string GetText() const;	//..........................................	// POST: RETURN == string in current node	Node* LChild() const;	//..........................................	// PRE: this != NULL	// POST: RETURN == pointer to left node	Node* RChild() const;	//..........................................	// PRE: this != NULL	// POST: RETURN == pointer to right node	// ---------- QUERIES ------------------------	bool IsLeaf() const;	//..........................................	// PRE: this != NULL	// POST: RETURN == whether or not this-> is a leaf node    private:	 Node* left;	// pointer to a left  child node	 Node* right;	// pointer to a right child node	 	 string text;	// DATA in Node -- text stored at this node	}; // class Node#endif