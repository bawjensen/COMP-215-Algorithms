#ifndef BINARYTree#define BINARYTree#include "Node.h"#include <algorithm>#include <iostream>#include <stdlib.h>class bTree{	public:			bTree();	// Default CTOR		//..........................................		//POST: new bTree has no root						bTree(string someText);	// CTOR when root (node) info is known		//..........................................		//POST: new bTree is created with a root with text 						void recursiveDTOR(Node*);		~bTree();	// DTOR		//..........................................		//POST: entire bTree is deleted/freed and all dynamic memory cleared				        Node* GetRoot(void) const   /* inline */ { return this->root; }		//..........................................		//POST: RETURN == address of root node            void InsertItem(string newText);        //..........................................        //POST: bTree with a new Node inserted holding the newText            //..........................................        // printing all nodes in the tree        void printPreorder(Node* p) const;        // POST: Displays data in preorder fashion            void printInorder(Node* p) const;        // POST: Displays data in inorder fashion             void printPostorder(Node* p) const;        // POST: Displays data in postorder fashion                short treeHeight(Node* p, short depth = 1) const;        //..........................................        // RETURNS: binary tree height where "height" will be here defined as        // number of NODES traversed from the root to the lowest leaf            short leafCount(Node* p) const;        //..........................................        // RETURNS: number of leaf nodes in the tree            bool search4Item(string key, Node* p) const;        //..........................................        // RETURNS: true if key was found in the tree    	private:		Node* root;    // pointer to root node of bTree		};// class bTree#endif